import numpy
import bornagain as ba
from bornagain import deg, angstrom, nm, kvector_t
from matplotlib import pyplot as plt
import matplotlib

matplotlib.rcParams['image.cmap'] = 'jet'

i=0
while i < 121:
    
    def get_sample():

        material_1 = ba.HomogeneousMaterial("Air", 0.0, 0.0)
        material_3 = ba.HomogeneousMaterial("Si", 5.73327e-06, 1.006366e-07)

    # Defining Layers

        layer_1 = ba.Layer(material_1)
        layer_2 = ba.Layer(material_3)


        formFactor_1 = ba.FormFactorPrism6(159.0*nm, 333.0*nm)


        particle_1 = ba.Particle(material_3, formFactor_1)
        particle_1_rotation = ba.RotationZ(i * deg)
        particle_1.setRotation(particle_1_rotation)


    # Defining Particle Layouts and adding Particles
        layout_1 = ba.ParticleLayout()
        layout_1.addParticle(particle_1, 1.0)
        layout_1.setTotalParticleSurfaceDensity(0.01)

    # Adding layouts to layers
        layer_1.addLayout(layout_1)

    # Defining Multilayers
        multiLayer_1 = ba.MultiLayer()
        multiLayer_1.addLayer(layer_1)
        multiLayer_1.addLayer(layer_2)
        return multiLayer_1


    def get_simulation():
        simulation = ba.GISASSimulation()
    
        detector = ba.RectangularDetector(981, 168.732, 1043, 179.396)
        detector.setPerpendicularToDirectBeam(830.0, 106.1068, 47.644)
        detector.setRegionOfInterest(0, 50, 168.73, 179.396)
        simulation.setDetector(detector)
    
        simulation.setDetectorResolutionFunction(ba.ResolutionFunction2DGaussian(0.43, 0.43))
        simulation.setBeamParameters(0.1341*nm, 0.2*deg, 0.0*deg)
        simulation.setBeamIntensity(5e+06)
        simulation.setTerminalProgressMonitor()
        return simulation


    def run_simulation():
        sample = get_sample()
        simulation = get_simulation()
        simulation.setSample(sample)
        simulation.runSimulation()
        return simulation.result()


    def plot(result):
        plt.figure(figsize=(12.80, 10.24))
        plt.subplot()
        ba.plot_colormap(result, units=ba.AxesUnits.QSPACE, title="Q-space",
                         xlabel=r'$Q_{y} [1/nm]$', ylabel=r'$Q_{z} [1/nm]$', zmin=0.2, zmax=1e+7)
        plt.savefig('{id:03d}.png'.format(id=i))


    if __name__ == '__main__':
        result = run_simulation()
        plot(result)

    i=i+5



